<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Providers\RouteServiceProvider;
use App\Models\User;
use Illuminate\Foundation\Auth\RegistersUsers;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use App\Models\Todo;
use App\Models\Category;
use Illuminate\Support\Str;

class RegisterController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Register Controller
    |--------------------------------------------------------------------------
    |
    | This controller handles the registration of new users as well as their
    | validation and creation. By default this controller uses a trait to
    | provide this functionality without requiring any additional code.
    |
    */

    use RegistersUsers;

    /**
     * Where to redirect users after registration.
     *
     * @var string
     */
    protected $redirectTo = RouteServiceProvider::HOME;

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('guest');
    }

    /**
     * Get a validator for an incoming registration request.
     *
     * @param  array  $data
     * @return \Illuminate\Contracts\Validation\Validator
     */
    protected function validator(array $data)
    {
        return Validator::make(
            $data, 
            [
                'username' => ['required', 'string', 'min:4', 'max:24', 'unique:users', 'alpha_num'],
                'password' => ['required', 'string', 'min:8', 'confirmed'],
            ],
            [
                'required' => '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é',
                'string' => '–≠—Ç–æ –ø–æ–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π',
                'max' => '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ max —Å–∏–º–≤–æ–ª–∞(–æ–≤)',
                'unique' => '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
                'alpha_num' => '–ü–æ–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã',
                'min' => '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ :min —Å–∏–º–≤–æ–ª–∞(–æ–≤)',
                'confirmed' => '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'
            ]
        );
    }

    /**
     * Create a new user instance after a valid registration.
     *
     * @param  array  $data
     * @return \App\Models\User
     */
    protected function create(array $data)
    {
        $user = User::create([
            'username' => $data['username'],
            'password' => Hash::make($data['password']),
        ]);

        $work = Category::create([
            'emoji' => 'üíº',
            'name' => '–†–∞–±–æ—Ç–∞',
            'author_id' => $user->id,
        ]);

        $home = Category::create([
            'emoji' => 'üè°',
            'name' => '–î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞',
            'author_id' => $user->id,
        ]);

        $isNewYear = in_array(now()->month, [6, 7, 8, 9, 10, 11, 12]);

        $plans = Category::create([
            'emoji' => $isNewYear ? 'üéÖ' : 'üåû',
            'name' => $isNewYear ? '–ü–ª–∞–Ω—ã –Ω–∞ –ù–æ–≤—ã–π –ì–æ–¥' : '–ü–ª–∞–Ω—ã –Ω–∞ –ª–µ—Ç–æ',
            'author_id' => $user->id,
        ]);

        $todofy = Category::create([
            'emoji' => 'üéà',
            'name' => 'TODOfy',
            'author_id' => $user->id,
        ]);

        Todo::create([
            'name' => '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! ü•≥',
            'data' => '{"time":1606479476434,"blocks":[{"type":"header","data":{"text":"–ü—Ä–∏–≤–µ—Ç&nbsp;üëã","level":5}},{"type":"paragraph","data":{"text":"&nbsp;&nbsp;"}},{"type":"paragraph","data":{"text":"<b>TODOfy</b>&nbsp;- —ç—Ç–æ open-source –ø—Ä–æ–µ–∫—Ç, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –Ω–∞ –±–∞–∑–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞&nbsp;<a href=\"https://laravel.com/\">Laravel</a>&nbsp;–¥–ª—è back-end&nbsp;–∏&nbsp;<a href=\"https://getbootstrap.com/\">Bootstrap</a>&nbsp;–¥–ª—è front-end —á–∞—Å—Ç–∏.&nbsp;&nbsp;"}},{"type":"paragraph","data":{"text":"&nbsp;&nbsp;"}},{"type":"paragraph","data":{"text":"–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ <a href=\"https://github.com/aethletic/todofy\">GitHub</a>."}},{"type":"paragraph","data":{"text":"&nbsp;&nbsp;"}},{"type":"paragraph","data":{"text":"<b>–ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>"}},{"type":"list","data":{"style":"unordered","items":["–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ <a href=\"https://editorjs.io/\">EditorJS</a>, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç&nbsp;<b>–∂–∏—Ä–Ω—ã–π</b>, <i>–Ω–∞–∫–ª–æ–Ω–Ω—ã–π,</i>&nbsp;<u class=\"cdx-underline\">–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u>, <mark class=\"cdx-marker\">–≤—ã–¥–µ–ª—è–µ–º—ã–π </mark>—Ç–µ–∫—Å—Ç, —Å–ø–∏—Å–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏.","–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–µ–ª–∏—Ç—å—Å—è –∑–∞–º–µ—Ç–∫–∞–º–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TODOfy –∫–∞–∫ –±–ª–æ–≥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É.&nbsp;","–ü–æ–ª–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤."]}},{"type":"paragraph","data":{"text":"&nbsp;&nbsp;"}},{"type":"paragraph","data":{"text":"–ö—Å—Ç–∞—Ç–∏, —ç—Ç–∞ –∑–∞–º–µ—Ç–∫–∞ <b>—É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞</b>,<b>&nbsp;</b>–µ—ë –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ <a href=\"' . url("/@{$user->username}/welcome") . '\">–ø–æ —Å—Å—ã–ª–∫–µ –∑–¥–µ—Å—å</a>&nbsp;–∏–ª–∏ –Ω–∞ <a href=\"' . url("/@{$user->username}") . '\">–≤–∞—à–µ–π –ø—É–±–ª–∏—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ</a>."}},{"type":"paragraph","data":{"text":"–ü—É–±–ª–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏–º–µ—é—Ç&nbsp;–≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∏–∫–æ–Ω–∫—É üì¢ , –∞ –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–∫—Ä–ø–ª–µ–Ω–∞, —Ç–æ –∏–∫–æ–Ω–∫—É&nbsp;üìå , –∑–∞–º–µ—Ç–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–º (–ø—Ä–∏–≤–∞—Ç–Ω—ã–µ), –∏–º–µ—é—Ç –∏–∫–æ–Ω–∫—É üîí."}},{"type":"paragraph","data":{"text":"&nbsp;"}},{"type":"paragraph","data":{"text":"<b>–ü—Ä–∏—è—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤–º–µ—Å—Ç–µ —Å TODOfy</b>&nbsp;üôÉ"}}],"version":"2.19.0"}',
            'code' => 'welcome',
            'status' => Todo::STATUS_ACTIVE,
            'shared' => Todo::SHARE_LINK,
            'pinned' => 1,
            'collapsed' => 1,
            'category_id' => $todofy->id,
            'author_id' => $user->id,
        ]);

        Todo::create([
            'name' => '–°—Ö–æ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ üõí',
            'data' => '{"time":1606308785346,"blocks":[{"type":"paragraph","data":{"text":"<b>–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:</b>"}},{"type":"list","data":{"style":"ordered","items":["–ú–æ–ª–æ–∫–æ&nbsp;ü•õ","–ö—Ä–∞–±–æ–≤—ã–µ –ø–∞–ª–æ—á–∫–∏ 1 —à—Ç.&nbsp;ü¶Ä","–ö—É–∫—É—Ä—É–∑–∞ 1 —à—Ç.&nbsp;üåΩ","–û–≥—É—Ä—Ü—ã&nbsp;ü•í","–ê–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π —Å–æ–æ–æ–æ–∫&nbsp;üçπ"]}}],"version":"2.19.0"}',
            'code' => 'products',
            'category_id' => $home->id,
            'author_id' => $user->id,
        ]);

        Todo::create([
            'name' => $isNewYear ? '–°–ª–µ–ø–∏—Ç—å —Å–Ω–µ–≥–æ–≤–∏–∫–∞ ‚õÑ' : '–°—ä–µ–∑–¥–∏—Ç—å –Ω–∞ –º–æ—Ä–µ üåä',
            'data' => '{"time":1606308447146,"blocks":[],"version":"2.19.0"}',
            'code' => 'snowman',
            'category_id' => $plans->id,
            'author_id' => $user->id,
        ]);
        
        Todo::create([
            'name' => '–ù–∞–ø–∏—Å–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—É—Å–∫ üçª',
            'data' => '{"time":1606308447146,"blocks":[],"version":"2.19.0"}',
            'code' => 'holiday',
            'category_id' => $work->id,
            'author_id' => $user->id,
        ]);

        return $user;
    }
}
